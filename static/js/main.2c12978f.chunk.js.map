{"version":3,"sources":["components/interests.js","components/images.js","main.js","App.js","serviceWorker.js","index.js"],"names":["InterestFinder","props","accessToken","useState","interest","setInterest","undefined","fetchedData","setFetchedData","showError","setShowError","handleSubmit","e","a","preventDefault","dataCall","axios","get","response","data","mapped","map","i","interests","id","name","audience","audience_size","strings","obj","JSON","stringify","Row","className","Col","xs","Form","onSubmit","Label","srOnly","Control","type","placeholder","value","onChange","target","Button","disabled","length","variant","onClick","Badge","Table","responsive","striped","bordered","hover","str","key","uuidv4","Alert","onClose","dismissible","Heading","ImageFinder","adAccountID","setAdAccountID","fetchedImageData","setFetchedImageData","fetchedAccountName","setFetchedAccountName","userBusiness","setUserBusiness","businessAdAccounts","setBusinessAdAccounts","all","then","spread","firstRes","secRes","useEffect","businesses","catch","sort","b","as","hidden","colSpan","item","hash","FbAPIConnect","showFBButton","setShowFBButton","setAccessToken","window","fbAsyncInit","FB","init","appId","cookie","xfbml","version","AppEvents","logPageView","getLoginStatus","status","XFBML","parse","authResponse","d","s","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","Container","fluid","span","offset","data-size","data-button-type","data-layout","data-auto-logout-link","data-use-continue-as","data-width","Tabs","transition","Tab","eventKey","title","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"sXAWe,SAASA,EAAeC,GAAQ,IACrCC,EAAgBD,EAAhBC,YADoC,EAEZC,mBAAS,IAFG,mBAErCC,EAFqC,KAE3BC,EAF2B,OAGNF,wBAASG,GAHH,mBAGrCC,EAHqC,KAGxBC,EAHwB,OAIVL,oBAAS,GAJC,mBAIrCM,EAJqC,KAI1BC,EAJ0B,KAMtCC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACnBD,EAAEE,iBADiB,KAEnBN,EAFmB,SAEEO,EAASX,GAFX,kCAGnBC,EAAY,IAHO,2CAAH,sDAWZU,EAAQ,uCAAG,WAAOX,GAAP,eAAAS,EAAA,+EAEUG,IAAMC,IAAN,+DACmCb,EADnC,mDACsFF,IAHhG,cAEPgB,EAFO,yBAKNA,EAASC,KAAKA,MALR,gCAObT,GAAa,GAPA,yDAAH,sDAWRU,EACJb,GACAA,EAAYc,KAAI,SAACC,GAAD,MAAO,CACrB,CAAC,CAAEC,UAAW,CAAC,CAAEC,GAAIF,EAAEE,GAAIC,KAAMH,EAAEG,SACnC,CAAEA,KAAMH,EAAEG,MACV,CAAEC,SAAUJ,EAAEK,mBAGZC,EACJR,GACAA,EAAOC,KAAI,SAACQ,GAAD,MAAS,CAACC,KAAKC,UAAUF,EAAI,IAAKA,EAAI,GAAGJ,KAAMI,EAAI,GAAGH,aAEnE,OACE,oCACE,kBAACM,EAAA,EAAD,CAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAMC,SAAU1B,GACd,kBAACyB,EAAA,EAAKJ,IAAN,CAAUC,UAAU,sBAClB,kBAACC,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACC,EAAA,EAAKE,MAAN,CAAYC,QAAM,GAAlB,eACA,kBAACH,EAAA,EAAKI,QAAN,CACEP,UAAU,OACVQ,KAAK,OACLC,YAAY,cACZjB,KAAK,WACLkB,MAAOvC,EACPwC,SAAU,SAAChC,GACTP,EAAYO,EAAEiC,OAAOF,WAI3B,kBAACT,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACW,EAAA,EAAD,CACEC,UAAW3C,EAAS4C,OACpBP,KAAK,SACLR,UAAU,QAHZ,aAQF,kBAACC,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACW,EAAA,EAAD,CAAQG,QAAQ,SAAShB,UAAU,OAAOiB,QAzDpC,WAClBxC,GAAa,GACbF,OAAeF,KAuDH,aAOPC,IAAgBA,EAAYyC,QAC3B,kBAACd,EAAA,EAAD,KACE,4BACE,kBAACiB,EAAA,EAAD,CAAOF,QAAQ,UAAf,iBAKR,kBAACjB,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACG3B,GACC,kBAAC6C,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACP,QAAQ,QAC/C,+BACE,4BACE,uCACA,oCACA,0CAGJ,+BACGrB,GACCA,EAAQP,KAAI,SAACoC,GAAD,OACV,wBAAIC,IAAKC,eACP,4BAAKF,EAAI,IACT,4BAAKA,EAAI,IACT,4BAAKA,EAAI,YAQxBhD,GACC,kBAACmD,EAAA,EAAD,CAAOX,QAAQ,SAASY,QAAS,kBAAMnD,GAAa,IAAQoD,aAAW,GACrE,kBAACF,EAAA,EAAMG,QAAP,iBACC7D,EACC,kFAEA,2FCnHG,SAAS8D,EAAY/D,GAAQ,IAClCC,EAAgBD,EAAhBC,YADiC,EAEHC,mBAAS,IAFN,mBAElC8D,EAFkC,KAErBC,EAFqB,OAGO/D,wBAASG,GAHhB,mBAGlC6D,EAHkC,KAGhBC,EAHgB,OAIWjE,wBAASG,GAJpB,mBAIlC+D,EAJkC,KAIdC,EAJc,OAKDnE,wBAASG,GALR,mBAKlCiE,EALkC,KAKpBC,EALoB,OAMWrE,wBAASG,GANpB,mBAMlCmE,EANkC,KAMdC,EANc,OAOPvE,oBAAS,GAPF,mBAOlCM,EAPkC,KAOvBC,EAPuB,KASnCC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACnBD,EAAEE,iBACFC,EAASkD,GACTC,EAAe,IAHI,2CAAH,sDAWZnD,EAAQ,uCAAG,WAAOkD,GAAP,SAAApD,EAAA,+EAEPG,IACH2D,IAAI,CACH3D,IAAMC,IAAN,0CACqCgD,EADrC,iEACyG/D,IAEzGc,IAAMC,IAAN,0CACqCgD,EADrC,sCAC8E/D,MAG/E0E,KACC5D,IAAM6D,QAAO,SAACC,EAAUC,GACtBX,EAAoBU,EAAS3D,KAAKA,MAClCmD,EAAsBS,EAAO5D,KAAKM,UAd3B,sDAkBbf,GAAa,GAlBA,wDAAH,sDAkDd,OA5BAsE,qBAAU,WACR9E,GACEc,IACGC,IADH,4EAEyEf,IAEtE0E,MAAK,SAAC1D,GACLsD,EAAgBtD,EAASC,KAAK8D,WAAW9D,KAAK,GAAGK,OAElD0D,OAAM,WACLxE,GAAa,QAElB,CAACR,IAEJ8E,qBAAU,WACRT,GACEvD,IACGC,IADH,0CAEuCsD,EAFvC,iEAE4GrE,IAEzG0E,MAAK,SAAC1D,GACLwD,EAAsBxD,EAASC,KAAKA,KAAKgE,MAAK,SAACtE,EAAGuE,GAAJ,OAAWvE,EAAEW,GAAK4D,EAAE5D,GAAM,GAAK,SAE9E0D,OAAM,WACLxE,GAAa,QAElB,CAAC6D,EAAcrE,IAGhB,oCACE,kBAAC8B,EAAA,EAAD,CAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,CAAMC,SAAU1B,GACd,kBAACyB,EAAA,EAAKJ,IAAN,CAAUC,UAAU,sBAClB,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAKE,MAAN,CAAYC,QAAM,GAAlB,eACA,kBAACH,EAAA,EAAKI,QAAN,CACEP,UAAU,OAAOoD,GAAG,SAAS3C,YAAY,gBACzCjB,KAAK,YAAYkB,MAAOsB,EACxBrB,SACC,SAAChC,GACAsD,EAAetD,EAAEiC,OAAOF,SAE1B,4BAAQ2C,QAAM,GAAd,qBACCb,GACCA,EAAmBpD,KAAI,SAACC,GAAD,OACrB,4BAAQoC,IAAKpC,EAAEE,GAAImB,MAAOrB,EAAEE,IACzBF,EAAEG,WAKb,kBAACS,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACW,EAAA,EAAD,CACEC,UAAWkB,EAAYjB,OACvBP,KAAK,SACLR,UAAU,QAHZ,aAQF,kBAACC,EAAA,EAAD,CAAKC,GAAG,QACN,kBAACW,EAAA,EAAD,CAAQG,QAAQ,SAAShB,UAAU,OAAOiB,QAzFpC,WAClBxC,GAAa,GACb0D,OAAoB9D,KAuFR,aAOP6D,IAAqBA,EAAiBnB,QACrC,kBAACd,EAAA,EAAD,KACE,4BACE,kBAACiB,EAAA,EAAD,CAAOF,QAAQ,UAAf,iBAKR,kBAACjB,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACGiC,GACC,kBAACf,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACP,QAAQ,QAC/C,+BACE,4BACE,wBAAIsC,QAAQ,KAAKlB,IAEnB,4BACE,0CACA,oCACA,qDAGJ,+BACGF,EAAiB9C,KAAI,SAACmE,GAAD,OACpB,wBAAI9B,IAAKC,eACP,4BAAK6B,EAAK/D,MACV,4BAAK+D,EAAKC,MACV,4BAAKD,EAAKhE,YAQvBf,GACC,kBAACmD,EAAA,EAAD,CAAOX,QAAQ,SAASY,QAAS,kBAAMnD,GAAa,IAAQoD,aAAW,GACrE,kBAACF,EAAA,EAAMG,QAAP,iBACC7D,EACC,uIAKA,2FC5JG,SAASwF,IAAgB,IAAD,EACGvF,oBAAS,GADZ,mBAC9BwF,EAD8B,KAChBC,EADgB,OAECzF,mBAAS,MAFV,mBAE9BD,EAF8B,KAEjB2F,EAFiB,KAuCrC,OAnCAb,qBAAU,WACRc,OAAOC,YAAc,WACnBD,OAAOE,GAAGC,KAAK,CACbC,MAAO,mBACPC,QAAQ,EACRC,OAAO,EACPC,QAAS,SAGXP,OAAOE,GAAGM,UAAUC,cAEpBT,OAAOE,GAAGQ,gBAAe,SAACtF,GACA,cAApBA,EAASuF,QACXb,GAAgB,GAChBE,OAAOE,GAAGU,MAAMC,UAEhBf,GAAgB,GAChBC,EAAe3E,EAAS0F,aAAa1G,kBAK3C,SAAW2G,EAAGC,EAAGtF,GACf,IAAIuF,EACFC,EAAMH,EAAEI,qBAAqBH,GAAG,GAC9BD,EAAEK,eAAe1F,MAGrBuF,EAAKF,EAAEM,cAAcL,IAClBtF,GAAKA,EACRuF,EAAGK,IAAM,4CACTJ,EAAIK,WAAWC,aAAaP,EAAIC,IATlC,CAUGO,SAAU,SAAU,oBACtB,IAGD,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACxF,UAAU,QACzB,kBAACD,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAKC,GAAI,CAAEuF,KAAM,EAAGC,OAAQ,IACzBhC,EACC,yBACE1D,UAAU,kBACV2F,YAAU,SACVC,mBAAiB,aACjBC,cAAY,UACZC,wBAAsB,QACtBC,uBAAqB,QACrBC,aAAW,KAGb,kBAAC9E,EAAA,EAAD,CAAOF,QAAQ,WAAf,qBAIN,kBAACiF,EAAA,EAAD,CAAMC,YAAY,GAChB,kBAACC,EAAA,EAAD,CAAKC,SAAS,YAAYC,MAAM,mBAC9B,kBAACtI,EAAD,CAAgBE,YAAaA,KAE/B,kBAACkI,EAAA,EAAD,CAAKC,SAAS,SAASC,MAAM,gBAC3B,kBAACtE,EAAD,CAAa9D,YAAaA,O,YC5DrBqI,MARf,WACE,OACE,yBAAKtG,UAAU,OACX,kBAACyD,EAAD,QCIY8C,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvB,SAASL,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEdjE,OAAM,SAAAkE,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c12978f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\n\nexport default function InterestFinder(props) {\n  const { accessToken } = props;\n  const [interest, setInterest] = useState(\"\");\n  const [fetchedData, setFetchedData] = useState(undefined);\n  const [showError, setShowError] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setFetchedData(await dataCall(interest));\n    setInterest(\"\");\n  };\n\n  const handleClear = () => {\n    setShowError(false);\n    setFetchedData(undefined);\n  };\n\n  const dataCall = async (interest) => {\n    try {\n      const response = await axios.get(\n        `https://graph.facebook.com/search?type=adinterest&q=[${interest}]&limit=10000&locale=en_US&access_token=${accessToken}`\n      );\n      return response.data.data;\n    } catch (err) {\n      setShowError(true);\n    }\n  };\n\n  const mapped =\n    fetchedData &&\n    fetchedData.map((i) => [\n      [{ interests: [{ id: i.id, name: i.name }] }],\n      { name: i.name },\n      { audience: i.audience_size },\n    ]);\n\n  const strings =\n    mapped &&\n    mapped.map((obj) => [JSON.stringify(obj[0]), obj[1].name, obj[2].audience]);\n\n  return (\n    <>\n      <Row className=\"mt-3\">\n        <Col xs=\"8\">\n          <Form onSubmit={handleSubmit}>\n            <Form.Row className=\"align-items-center\">\n              <Col xs=\"auto\">\n                <Form.Label srOnly>Ad Interest</Form.Label>\n                <Form.Control\n                  className=\"mb-2\"\n                  type=\"text\"\n                  placeholder=\"Ad Interest\"\n                  name=\"interest\"\n                  value={interest}\n                  onChange={(e) => {\n                    setInterest(e.target.value);\n                  }}\n                />\n              </Col>\n              <Col xs=\"auto\">\n                <Button\n                  disabled={!interest.length}\n                  type=\"submit\"\n                  className=\"mb-2\"\n                >\n                  Get Data\n                </Button>\n              </Col>\n              <Col xs=\"auto\">\n                <Button variant=\"danger\" className=\"mb-2\" onClick={handleClear}>\n                  Clear\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Col>\n        {fetchedData && !fetchedData.length && (\n          <Col>\n            <h4>\n              <Badge variant=\"danger\">No Results</Badge>\n            </h4>\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <Col>\n          {fetchedData && (\n            <Table responsive striped bordered hover variant=\"dark\">\n              <thead>\n                <tr>\n                  <th>ID/Name</th>\n                  <th>Name</th>\n                  <th>Audience</th>\n                </tr>\n              </thead>\n              <tbody>\n                {strings &&\n                  strings.map((str) => (\n                    <tr key={uuidv4()}>\n                      <td>{str[0]}</td>\n                      <td>{str[1]}</td>\n                      <td>{str[2]}</td>\n                    </tr>\n                  ))}\n              </tbody>\n            </Table>\n          )}\n        </Col>\n      </Row>\n      {showError && (\n        <Alert variant=\"danger\" onClose={() => setShowError(false)} dismissible>\n          <Alert.Heading>Oh snap!</Alert.Heading>\n          {accessToken ? (\n            <p>Please verify your input or refresh the application</p>\n          ) : (\n            <p>Please authenticate with your Facebook account to continue</p>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\n\nexport default function ImageFinder(props) {\n  const { accessToken } = props;\n  const [adAccountID, setAdAccountID] = useState(\"\");\n  const [fetchedImageData, setFetchedImageData] = useState(undefined);\n  const [fetchedAccountName, setFetchedAccountName] = useState(undefined);\n  const [userBusiness, setUserBusiness] = useState(undefined);\n  const [businessAdAccounts, setBusinessAdAccounts] = useState(undefined);\n  const [showError, setShowError] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    dataCall(adAccountID);\n    setAdAccountID(\"\");\n  };\n\n  const handleClear = () => {\n    setShowError(false);\n    setFetchedImageData(undefined);\n  };\n\n  const dataCall = async (adAccountID) => {\n    try {\n      await axios\n        .all([\n          axios.get(\n            `https://graph.facebook.com/v8.0/${adAccountID}/adimages?fields=name,id,hash&limit=1000&access_token=${accessToken}`\n          ),\n          axios.get(\n            `https://graph.facebook.com/v8.0/${adAccountID}/?fields=name&access_token=${accessToken}`\n          ),\n        ])\n        .then(\n          axios.spread((firstRes, secRes) => {\n            setFetchedImageData(firstRes.data.data);\n            setFetchedAccountName(secRes.data.name);\n          })\n        );\n    } catch (err) {\n      setShowError(true);\n    }\n  };\n\n  useEffect(() => {\n    accessToken &&\n      axios\n        .get(\n          `https://graph.facebook.com/v8.0/me?fields=businesses&access_token=${accessToken}`\n        )\n        .then((response) => {\n          setUserBusiness(response.data.businesses.data[0].id);\n        })\n        .catch(() => {\n          setShowError(true);\n        });\n  }, [accessToken]);\n\n  useEffect(() => {\n    userBusiness &&\n      axios\n        .get(\n          `https://graph.facebook.com/v8.0/${userBusiness}/owned_ad_accounts?fields=name&limit=500&access_token=${accessToken}`\n        )\n        .then((response) => {\n          setBusinessAdAccounts(response.data.data.sort((a, b) => (a.id > b.id) ? 1 : -1));\n        })\n        .catch(() => {\n          setShowError(true);\n        });\n  }, [userBusiness, accessToken]);\n\n  return (\n    <>\n      <Row className=\"mt-3\">\n        <Col xs=\"8\">\n          <Form onSubmit={handleSubmit}>\n            <Form.Row className=\"align-items-center\">\n              <Col xs=\"4\">\n                <Form.Label srOnly>Ad Interest</Form.Label>\n                <Form.Control\n                  className=\"mb-2\" as=\"select\" placeholder=\"Ad Account ID\"\n                  name=\"accountID\" value={adAccountID}\n                  onChange=\n                  {(e) => {\n                    setAdAccountID(e.target.value);\n                  }}>\n                  <option hidden>Select Ad Account</option>\n                  {businessAdAccounts &&\n                    businessAdAccounts.map((i) => (\n                      <option key={i.id} value={i.id}>\n                        {i.name}\n                      </option>\n                    ))}\n                </Form.Control>\n              </Col>\n              <Col xs=\"auto\">\n                <Button\n                  disabled={!adAccountID.length}\n                  type=\"submit\"\n                  className=\"mb-2\"\n                >\n                  Get Data\n                </Button>\n              </Col>\n              <Col xs=\"auto\">\n                <Button variant=\"danger\" className=\"mb-2\" onClick={handleClear}>\n                  Clear\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Col>\n        {fetchedImageData && !fetchedImageData.length && (\n          <Col>\n            <h4>\n              <Badge variant=\"danger\">No Results</Badge>\n            </h4>\n          </Col>\n        )}\n      </Row>\n      <Row>\n        <Col>\n          {fetchedImageData && (\n            <Table responsive striped bordered hover variant=\"dark\">\n              <thead>\n                <tr>\n                  <th colSpan=\"3\">{fetchedAccountName}</th>\n                </tr>\n                <tr>\n                  <th>Image Name</th>\n                  <th>Hash</th>\n                  <th>ID (Account + Hash)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {fetchedImageData.map((item) => (\n                  <tr key={uuidv4()}>\n                    <td>{item.name}</td>\n                    <td>{item.hash}</td>\n                    <td>{item.id}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n        </Col>\n      </Row>\n      {showError && (\n        <Alert variant=\"danger\" onClose={() => setShowError(false)} dismissible>\n          <Alert.Heading>Oh snap!</Alert.Heading>\n          {accessToken ? (\n            <p>\n              Please confirm that you entered a valid Ad Account ID, refresh the\n              application or contact the developer.\n            </p>\n          ) : (\n            <p>Please authenticate with your Facebook account to continue</p>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Tabs from \"react-bootstrap/Tabs\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Badge from \"react-bootstrap/Badge\";\nimport InterestFinder from \"./components/interests.js\";\nimport ImageFinder from \"./components/images.js\";\n\nexport default function FbAPIConnect() {\n  const [showFBButton, setShowFBButton] = useState(true);\n  const [accessToken, setAccessToken] = useState(null);\n\n  useEffect(() => {\n    window.fbAsyncInit = () => {\n      window.FB.init({\n        appId: \"1045150769237017\",\n        cookie: true,\n        xfbml: true,\n        version: \"v8.0\",\n      });\n\n      window.FB.AppEvents.logPageView();\n\n      window.FB.getLoginStatus((response) => {\n        if (response.status !== \"connected\") {\n          setShowFBButton(true);\n          window.FB.XFBML.parse();\n        } else {\n          setShowFBButton(false);\n          setAccessToken(response.authResponse.accessToken);\n        }\n      });\n    };\n\n    (function (d, s, id) {\n      var js,\n        fjs = d.getElementsByTagName(s)[0];\n      if (d.getElementById(id)) {\n        return;\n      }\n      js = d.createElement(s);\n      js.id = id;\n      js.src = \"https://connect.facebook.net/en_US/sdk.js\";\n      fjs.parentNode.insertBefore(js, fjs);\n    })(document, \"script\", \"facebook-jssdk\");\n  }, []);\n\n  return (\n    <Container fluid className=\"mt-3\">\n      <Row>\n        <Col xs={{ span: 4, offset: 8 }}>\n          {showFBButton ? (\n            <div\n              className=\"fb-login-button\"\n              data-size=\"medium\"\n              data-button-type=\"login_with\"\n              data-layout=\"rounded\"\n              data-auto-logout-link=\"false\"\n              data-use-continue-as=\"false\"\n              data-width=\"\"\n            ></div>\n          ) : (\n            <Badge variant=\"success\">Connected to FB</Badge>\n          )}\n        </Col>\n      </Row>\n      <Tabs transition={false}>\n        <Tab eventKey=\"interests\" title=\"Interest Finder\">\n          <InterestFinder accessToken={accessToken} />\n        </Tab>\n        <Tab eventKey=\"images\" title=\"Image Finder\">\n          <ImageFinder accessToken={accessToken} />\n        </Tab>\n      </Tabs>\n    </Container>\n  );\n}\n","import React from 'react';\nimport FbAPIConnect from './main.js'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <FbAPIConnect />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}